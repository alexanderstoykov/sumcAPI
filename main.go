package main

import (
	"os/exec"
	"net/http"
	"io/ioutil"
	"encoding/json"
	"strconv"
	"time"
	"math"
	"fmt"
	"strings"
)

type AutoGenerated struct {
	Lines []struct {
		VehicleType string `json:"vehicle_type"`
		Arrivals []struct {
			Time string `json:"time"`
		} `json:"arrivals"`
		Name string `json:"name"`
	} `json:"lines"`
	TimestampCalculated string `json:"timestamp_calculated"`
}

func main() {
	for {
		command := "New-BurntToastNotification -Text 'Тръгвай сиииии',  '"
		response := callSumc()
		now := time.Now().UTC().Add(3 * time.Hour)
		ymd := now.Format("2006-01-02")
		next := map[int][]int{}

		for _, line := range response.Lines {
			lineNumber, _ := strconv.Atoi(line.Name)
			if lineNumber < 10 {
				for _, arrival := range line.Arrivals {
					tt, _ := time.Parse("2006-01-02 15:04:05", ymd+" "+arrival.Time)
					minutes := math.Round(tt.Sub(now).Minutes())
					if _, ok := next[lineNumber]; !ok {
						next[lineNumber] = []int{}
					}
					if len(next[lineNumber]) < 2 {
						next[lineNumber] = append(next[lineNumber], int(minutes))
					}
				}
			}
		}

		for line, аrrivals := range next {
			command += "Автобус " + strconv.Itoa(line) + " след " + strings.Trim(strings.Join(strings.Fields(fmt.Sprint(аrrivals)), ", "), "[]") + " минути                      "
		}
		command += "'"

		exec.Command("PowerShell", command).Run()
		time.Sleep(time.Second * 10)
	}
}

func callSumc() (response AutoGenerated) {
	client := http.Client{}
	url := "https://api-arrivals.sofiatraffic.bg/api/v1/arrivals/2593/"
	resp, _ := client.Get(url)
	bytes, _ := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	json.Unmarshal(bytes, &response)

	return
}

func PrettyPrint(v interface{}) {
	b, _ := json.MarshalIndent(v, "", " ")
	println(string(b))
}
